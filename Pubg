<!doctype html>
<html lang="uz">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Battle Royale Mini (Single File)</title>
<style>
  :root{
    --bg:#0b0e14; --fg:#e6e6e6; --muted:#a7b0c0; --accent:#6d9eff; --good:#22c55e; --bad:#ef4444;
  }
  html,body{height:100%;}
  body{margin:0; background:var(--bg); color:var(--fg); font-family:ui-sans-serif,system-ui,Segoe UI,Roboto,Helvetica,Arial,"Apple Color Emoji","Segoe UI Emoji"}
  #wrap{position:relative; height:100vh; overflow:hidden}
  canvas{display:block; width:100%; height:100%; background:#1a2233}
  .hud{position:absolute; inset:0; pointer-events:none}
  .row{position:absolute; left:12px; top:12px; display:flex; gap:8px; align-items:center}
  .chip{pointer-events:auto; background:#0008; border:1px solid #ffffff22; padding:6px 10px; border-radius:12px; font-size:12px}
  .hpbar{position:absolute; left:12px; bottom:12px; width:240px; height:14px; background:#0008; border:1px solid #ffffff22; border-radius:10px; overflow:hidden}
  .hpbar>i{display:block; height:100%; background:linear-gradient(90deg, #22c55e, #16a34a)}
  .ammo{position:absolute; left:12px; bottom:36px; font-size:13px; opacity:.9}
  .center-msg{position:absolute; left:50%; top:18px; transform:translateX(-50%); background:#0008; padding:6px 10px; border-radius:10px; border:1px solid #ffffff22; font-size:12px}
  .killfeed{position:absolute; right:12px; top:12px; width:240px; max-height:45vh; overflow:auto; display:flex; flex-direction:column; gap:6px}
  .feed{background:#0008; border:1px solid #ffffff22; padding:6px 8px; border-radius:10px; font-size:12px}
  .minimap{position:absolute; right:12px; bottom:12px; width:140px; height:140px; border-radius:10px; overflow:hidden; border:1px solid #ffffff22; background:#000c}
  .overlay{position:absolute; inset:0; display:grid; place-items:center; background:linear-gradient(150deg,#0b0e14 0%,#0b0e14cc 60%,#0b0e14 100%)}
  .panel{width:min(680px,92vw); background:#0d1220; border:1px solid #2c3552; border-radius:16px; padding:20px; box-shadow:0 20px 60px #0008}
  h1{margin:0 0 6px 0; font-size:22px}
  .panel p{color:var(--muted); font-size:14px; line-height:1.5}
  .btn{pointer-events:auto; display:inline-block; background:var(--accent); color:#071225; border:none; padding:10px 14px; border-radius:12px; font-weight:700; cursor:pointer}
  .controls{display:grid; grid-template-columns:1fr 1fr; gap:12px; margin:12px 0}
  .kbd{background:#111827; border:1px solid #24324d; padding:8px 10px; border-radius:10px; font-size:13px}
  .top-right{position:absolute; right:12px; top:64px; display:flex; gap:8px}
  .circle-btn{pointer-events:auto; width:36px; height:36px; border-radius:50%; background:#0008; border:1px solid #ffffff22; display:grid; place-items:center; cursor:pointer}
  .toast{position:absolute; left:50%; bottom:22px; transform:translateX(-50%); background:#000b; border:1px solid #ffffff22; padding:8px 12px; font-size:12px; border-radius:10px; opacity:0; transition:opacity .25s}
  .toast.show{opacity:1}
</style>
</head>
<body>
<div id="wrap">
  <canvas id="game" width="1280" height="720"></canvas>
  <div class="hud" id="hud">
    <div class="row">
      <div class="chip" id="alive">O‘yinchilar: 1/1</div>
      <div class="chip" id="phase">Zona: 1 / 5</div>
      <div class="chip" id="timer">00:00</div>
    </div>
    <div class="center-msg" id="centerMsg">WASD yurish · Sichqoncha nishon · LKM otish</div>
    <div class="killfeed" id="feed"></div>
    <div class="hpbar"><i id="hpfill" style="width:100%"></i></div>
    <div class="ammo" id="ammo">Patron: 30 / ∞</div>
    <div class="minimap"><canvas id="mini" width="140" height="140"></canvas></div>
    <div class="top-right">
      <button class="circle-btn" id="pauseBtn" title="Pauza">⏸</button>
      <button class="circle-btn" id="restartBtn" title="Qayta boshlash">↻</button>
    </div>
    <div class="toast" id="toast">Loot oldingiz!</div>
  </div>

  <div class="overlay" id="menu">
    <div class="panel">
      <h1>Battle Royale Mini</h1>
      <p>Bir faylli mini battle-royale. Maqsad — omon qolish. Zona torayadi, loot tering, botlarni yengib oxirgi bo‘lib qoling.</p>
      <div class="controls">
        <div class="kbd">W A S D — yurish</div>
        <div class="kbd">Sichqoncha — nishon</div>
        <div class="kbd">LKM — otish</div>
        <div class="kbd">R — qayta yuklash</div>
      </div>
      <div style="display:flex; gap:10px; align-items:center; justify-content:space-between">
        <label style="color:#a7b0c0; font-size:13px">Botlar soni: <input id="botCount" type="range" min="5" max="40" value="18" oninput="botLabel.textContent=this.value"> <b id="botLabel">18</b></label>
        <button class="btn" id="start">Boshlash</button>
      </div>
    </div>
  </div>
</div>
<script>
(() => {
  const canvas = document.getElementById('game');
  const ctx = canvas.getContext('2d');
  const hudAlive = document.getElementById('alive');
  const hudPhase = document.getElementById('phase');
  const hudTimer = document.getElementById('timer');
  const hpfill = document.getElementById('hpfill');
  const ammoEl = document.getElementById('ammo');
  const feed = document.getElementById('feed');
  const menu = document.getElementById('menu');
  const startBtn = document.getElementById('start');
  const botCountRange = document.getElementById('botCount');
  const pauseBtn = document.getElementById('pauseBtn');
  const restartBtn = document.getElementById('restartBtn');
  const centerMsg = document.getElementById('centerMsg');
  const mini = document.getElementById('mini');
  const mctx = mini.getContext('2d');
  const toast = document.getElementById('toast');

  const W = 2200, H = 2200; // world size
  const TILE = 120;
  const ZONE_PHASES = 5;

  let state = null; // will hold runtime game state
  let pressed = new Set();
  let mouse = {x:0,y:0,down:false};
  let lastTime = 0; let acc = 0; const dt = 1/60; // fixed timestep
  let paused = false;

  // --- simple sfx via WebAudio (bleeps only)
  const AudioCtx = window.AudioContext || window.webkitAudioContext;
  const audio = new AudioCtx();
  function beep(freq=440, dur=0.1, type='square', vol=0.05){
    const o = audio.createOscillator();
    const g = audio.createGain();
    o.type = type; o.frequency.value = freq; g.gain.value = vol;
    o.connect(g).connect(audio.destination); o.start(); o.stop(audio.currentTime + dur);
  }

  // helpers
  const clamp=(v,a,b)=>Math.max(a,Math.min(b,v));
  const rand=(a,b)=>Math.random()*(b-a)+a;
  const dist=(a,b)=>Math.hypot(a.x-b.x,a.y-b.y);
  const lerp=(a,b,t)=>a+(b-a)*t;

  // camera
  const cam = {x:0,y:0,scale:1};
  function toScreen(wx, wy){ return {x:(wx - cam.x)*cam.scale + canvas.width/2, y:(wy - cam.y)*cam.scale + canvas.height/2}; }

  // entities
  function makePlayer(){
    return {type:'player', x:W/2, y:H/2, r:16, hp:100, ammo:30, maxAmmo:30, speed:230, fireCd:0, kills:0, alive:true};
  }
  function makeBot(){
    const edge = Math.random()<.5;
    const x = edge? (Math.random()<.5? 50: W-50) : rand(50,W-50);
    const y = !edge? (Math.random()<.5? 50: H-50) : rand(50,H-50);
    return {type:'bot', x, y, r:14, hp:80, speed:190, fireCd:0, target:null, alive:true, wanderA:rand(0,Math.PI*2)};
  }
  function makeBullet(owner, ang){
    const s = owner.type==='player'? 820 : 640;
    const spread = owner.type==='player'? 0.02 : 0.06;
    ang += rand(-spread,spread);
    const vx = Math.cos(ang)*s, vy=Math.sin(ang)*s;
    return {type:'bullet', x:owner.x, y:owner.y, vx, vy, life:0.9, owner};
  }
  function makeCrate(){
    return {type:'crate', x:rand(120,W-120), y:rand(120,H-120), r:14, kind: Math.random()<.6? 'ammo':'med'}
  }

  // world generation (simple tiled grass + rocks)
  function drawWorld(){
    const startX = Math.floor((cam.x - canvas.width/2/cam.scale)/TILE)-1;
    const endX   = Math.floor((cam.x + canvas.width/2/cam.scale)/TILE)+1;
    const startY = Math.floor((cam.y - canvas.height/2/cam.scale)/TILE)-1;
    const endY   = Math.floor((cam.y + canvas.height/2/cam.scale)/TILE)+1;
    for(let gx=startX; gx<=endX; gx++){
      for(let gy=startY; gy<=endY; gy++){
        const x = gx*TILE, y=gy*TILE;
        const scr = toScreen(x,y);
        ctx.fillStyle = ((gx+gy)&1)? '#1c2437' : '#1e2a3f';
        ctx.fillRect(scr.x, scr.y, TILE*cam.scale, TILE*cam.scale);
        // rocks
        const seed = (gx*73856093 ^ gy*19349663)>>>0;
        const rcount = seed%3;
        for(let i=0;i<rcount;i++){
          const rx = scr.x + ((seed>>i)&63); const ry = scr.y + (((seed>>i*2)&63));
          ctx.fillStyle = '#2b3a55';
          ctx.beginPath(); ctx.ellipse(rx, ry, 6, 4, 0, 0, Math.PI*2); ctx.fill();
        }
      }
    }
  }

  // zone (circle)
  function makeZone(){
    return {phase:1, x:W/2, y:H/2, r: Math.max(W,H)*0.45, targetR:0, t:0, shrinkTime:25, pauseTime:10, timer:10};
  }
  function updateZone(z, dt){
    if(z.timer>0){ z.timer-=dt; return; }
    // shrinking
    if(z.targetR===0){ z.targetR = z.r*0.6; z.t = 0; }
    z.t += dt/z.shrinkTime; z.r = lerp(z.r, z.targetR, Math.min(1,z.t));
    if(z.t>=1){
      if(z.phase>=ZONE_PHASES){ return; }
      z.phase++; z.timer = z.pauseTime; z.targetR = 0; // next target will be set on next update
    }
  }

  function drawZone(z){
    const scr = toScreen(z.x,z.y);
    ctx.beginPath(); ctx.arc(scr.x, scr.y, z.r*cam.scale, 0, Math.PI*2);
    ctx.strokeStyle = '#6d9effcc'; ctx.lineWidth = 4; ctx.setLineDash([10,10]); ctx.stroke(); ctx.setLineDash([]);
  }

  function damageOutsideZone(e, z, dt){
    const d = Math.hypot(e.x - z.x, e.y - z.y);
    if(d > z.r) e.hp -= 12*dt; // tick damage
  }

  // AI
  function botThink(bot, s, dt){
    if(!bot.alive) return;
    const p = s.player;
    const d = Math.hypot(p.x-bot.x, p.y-bot.y);
    // choose target: player if near, else wander
    if(d < 520){
      bot.target = p;
      // move towards with small strafe
      const ang = Math.atan2(p.y-bot.y, p.x-bot.x) + Math.sin(s.time*2+bot.x*0.01)*0.7*0.2;
      bot.x += Math.cos(ang)*bot.speed*dt;
      bot.y += Math.sin(ang)*bot.speed*dt;
      // shoot with cooldown
      bot.fireCd -= dt;
      if(bot.fireCd<=0){
        s.bullets.push(makeBullet(bot, Math.atan2(p.y-bot.y, p.x-bot.x)));
        bot.fireCd = 0.45 + Math.random()*0.2; beep(190,0.05,'square',0.02);
      }
    } else {
      bot.target = null;
      bot.wanderA += rand(-0.4,0.4)*dt;
      bot.x += Math.cos(bot.wanderA)*bot.speed*0.6*dt;
      bot.y += Math.sin(bot.wanderA)*bot.speed*0.6*dt;
    }
    // clamp to world
    bot.x = clamp(bot.x, 20, W-20); bot.y = clamp(bot.y, 20, H-20);
  }

  // collisions and damage
  function circleHit(a,b){ return Math.hypot(a.x-b.x,a.y-b.y) < (a.r + (b.r||6)); }

  function spawnLoot(s, x, y){
    if(Math.random()<0.7) s.crates.push({type:'crate', x, y, r:14, kind: Math.random()<.6? 'ammo':'med'});
  }

  function addFeed(text){
    const el = document.createElement('div'); el.className='feed'; el.textContent=text; feed.prepend(el);
    while(feed.children.length>10) feed.lastChild.remove();
  }

  // draw helpers
  function drawEntity(e){
    if(e.type==='player'){
      const scr = toScreen(e.x,e.y);
      ctx.save(); ctx.translate(scr.x, scr.y);
      // body
      ctx.fillStyle = '#9ad7ff'; ctx.beginPath(); ctx.arc(0,0,e.r*cam.scale,0,Math.PI*2); ctx.fill();
      // gun arm
      const ang = Math.atan2(mouse.worldY - e.y, mouse.worldX - e.x);
      ctx.rotate(ang);
      ctx.fillStyle = '#223b50'; ctx.fillRect(8*cam.scale, -3*cam.scale, 18*cam.scale, 6*cam.scale);
      ctx.restore();
    }
    else if(e.type==='bot'){
      const scr = toScreen(e.x,e.y);
      ctx.fillStyle = '#f2b8b5';
      ctx.beginPath(); ctx.arc(scr.x, scr.y, e.r*cam.scale, 0, Math.PI*2); ctx.fill();
      // facing line
      ctx.strokeStyle = '#612a28'; ctx.beginPath(); ctx.moveTo(scr.x, scr.y);
      const ang = state && state.player? Math.atan2(state.player.y-e.y, state.player.x-e.x):0;
      ctx.lineTo(scr.x + Math.cos(ang)*e.r*cam.scale, scr.y + Math.sin(ang)*e.r*cam.scale); ctx.stroke();
    }
    else if(e.type==='bullet'){
      const scr = toScreen(e.x,e.y);
      ctx.fillStyle = '#ffe48a'; ctx.beginPath(); ctx.arc(scr.x, scr.y, 3*cam.scale, 0, Math.PI*2); ctx.fill();
    }
    else if(e.type==='crate'){
      const scr = toScreen(e.x,e.y);
      ctx.fillStyle = e.kind==='ammo'?'#7dd3fc':'#86efac';
      ctx.beginPath(); ctx.roundRect(scr.x-10*cam.scale, scr.y-10*cam.scale, 20*cam.scale, 20*cam.scale, 4*cam.scale); ctx.fill();
      ctx.strokeStyle = '#0b0e14'; ctx.strokeRect(scr.x-10*cam.scale, scr.y-10*cam.scale, 20*cam.scale, 20*cam.scale);
    }
  }

  // minimap
  function drawMini(s){
    mctx.clearRect(0,0,mini.width, mini.height);
    // map area
    mctx.fillStyle = '#0b1323'; mctx.fillRect(0,0,mini.width, mini.height);
    mctx.strokeStyle = '#334155'; mctx.strokeRect(0,0,mini.width, mini.height);
    const sx = mini.width/W, sy = mini.height/H;
    // zone
    mctx.beginPath();
    mctx.arc(s.zone.x*sx, s.zone.y*sy, s.zone.r*sx, 0, Math.PI*2);
    mctx.strokeStyle = '#6d9eff'; mctx.lineWidth=2; mctx.setLineDash([6,4]); mctx.stroke(); mctx.setLineDash([]);
    // bots
    mctx.fillStyle = '#fda4af';
    for(const b of s.bots.filter(b=>b.alive)) mctx.fillRect(b.x*sx-2, b.y*sy-2, 4,4);
    // player
    mctx.fillStyle = '#93c5fd'; mctx.fillRect(s.player.x*sx-2, s.player.y*sy-2, 4,4);
  }

  // input
  window.addEventListener('keydown',e=>{ if(e.repeat) return; pressed.add(e.key.toLowerCase()); if(e.key==='r'){ reset(); } if(e.key==='p'){ togglePause(); } });
  window.addEventListener('keyup',e=>{ pressed.delete(e.key.toLowerCase()); });
  canvas.addEventListener('mousedown', e=>{ if(audio.state==='suspended') audio.resume(); mouse.down=true; });
  canvas.addEventListener('mouseup', ()=> mouse.down=false);
  canvas.addEventListener('mousemove', e=>{
    const rect = canvas.getBoundingClientRect();
    mouse.x = e.clientX - rect.left; mouse.y = e.clientY - rect.top;
  });

  pauseBtn.addEventListener('click', togglePause);
  restartBtn.addEventListener('click', ()=>reset(true));
  startBtn.addEventListener('click', ()=>{ menu.style.display='none'; startGame(parseInt(botCountRange.value,10)); });

  function togglePause(){ paused = !paused; centerMsg.textContent = paused? 'Pauza' : 'WASD · LKM otish'; }

  function showToast(txt){ toast.textContent=txt; toast.classList.add('show'); setTimeout(()=>toast.classList.remove('show'),1200); }

  function startGame(botsN){
    state = {
      time:0,
      player: makePlayer(),
      bots: Array.from({length:botsN}, makeBot),
      bullets: [],
      crates: Array.from({length:10}, makeCrate),
      zone: makeZone(),
      alive: 1 + botsN,
      startedAt: performance.now(),
    };
    addFeed('O‘yin boshlandi! Omad.');
  }

  function reset(hard){
    if(hard){ menu.style.display='grid'; feed.innerHTML=''; }
    else { addFeed('Qayta yuklandi (R)'); }
    startGame(parseInt(botCountRange.value,10));
  }

  // main update
  function update(s, dt){
    s.time += dt;
    const p = s.player; if(!p.alive) return;

    // aim to world coords
    const world = { x: (mouse.x - canvas.width/2)/cam.scale + cam.x, y: (mouse.y - canvas.height/2)/cam.scale + cam.y };
    mouse.worldX = world.x; mouse.worldY = world.y;

    // movement
    let dx=0, dy=0; if(pressed.has('w')) dy-=1; if(pressed.has('s')) dy+=1; if(pressed.has('a')) dx-=1; if(pressed.has('d')) dx+=1;
    if(dx||dy){ const l=Math.hypot(dx,dy); dx/=l; dy/=l; p.x+=dx*p.speed*dt; p.y+=dy*p.speed*dt; }
    p.x = clamp(p.x, 20, W-20); p.y = clamp(p.y, 20, H-20);

    // shooting
    p.fireCd -= dt;
    if(mouse.down && p.fireCd<=0 && p.ammo>0){
      const ang = Math.atan2(world.y-p.y, world.x-p.x);
      s.bullets.push(makeBullet(p, ang));
      p.fireCd = 0.12; p.ammo--; ammoEl.textContent = `Patron: ${p.ammo} / ∞`; beep(600,0.03,'square',0.03);
    }

    // bots
    for(const b of s.bots){ if(b.alive) botThink(b, s, dt); }

    // bullets
    for(const bu of s.bullets){
      bu.life -= dt; bu.x += bu.vx*dt; bu.y += bu.vy*dt; if(bu.life<=0) bu.dead=true;
      // hit tests
      if(bu.owner.type!=='player'){
        // bullet from bot -> player
        if(p.alive && circleHit({x:bu.x,y:bu.y,r:2}, p)){
          p.hp -= 14; bu.dead=true; beep(120,0.05,'triangle',0.03);
          if(p.hp<=0){ p.alive=false; addFeed('Siz yiqildingiz.'); showToast('Mag‘lubiyat 😵'); }
        }
      } else {
        for(const b of s.bots){ if(!b.alive) continue; if(circleHit({x:bu.x,y:bu.y,r:2}, b)){ b.hp -= 34; bu.dead=true; if(b.hp<=0){ b.alive=false; s.alive--; p.kills++; addFeed(`Bot yiqitildi (${p.kills} kill)`); spawnLoot(s,b.x,b.y); beep(900,0.08,'sawtooth',0.03);} } }
      }
    }
    s.bullets = s.bullets.filter(x=>!x.dead);

    // loot pickup
    s.crates = s.crates.filter(c=>{
      if(dist(p,c)<(p.r+c.r+6)){
        if(c.kind==='ammo'){ p.ammo = Math.min(p.maxAmmo, p.ammo+20); ammoEl.textContent = `Patron: ${p.ammo} / ∞`; showToast('+20 patron'); beep(520,0.05,'square',0.03); }
        else { p.hp = Math.min(100, p.hp+30); showToast('+30 HP'); beep(440,0.07,'triangle',0.03); }
        return false;
      }
      return true;
    });

    // zone
    updateZone(s.zone, dt);
    damageOutsideZone(p, s.zone, dt);
    for(const b of s.bots){ if(b.alive) damageOutsideZone(b, s.zone, dt); if(b.alive && b.hp<=0){ b.alive=false; s.alive--; addFeed('Zona botni yutdi'); } }

    // win/lose
    if(p.alive && s.bots.every(b=>!b.alive)){
      addFeed('G‘olib! Oxirgi tirik odam siz!'); showToast('WINNER 🏆'); p.alive=false; // freeze
    }

    // camera follow
    cam.x = lerp(cam.x, p.x, 0.12); cam.y = lerp(cam.y, p.y, 0.12);

    // HUD
    hpfill.style.width = clamp(p.hp,0,100)+'%';
    hudAlive.textContent = `O‘yinchilar: ${1 + s.bots.filter(b=>b.alive).length}/${1 + s.bots.length}`;
    hudPhase.textContent = `Zona: ${s.zone.phase} / ${ZONE_PHASES}`;
    const t = Math.max(0, Math.floor(s.zone.timer)); const mm=String(Math.floor(t/60)).padStart(2,'0'), ss=String(t%60).padStart(2,'0');
    hudTimer.textContent = `${mm}:${ss}`;
  }

  function render(s){
    // clear
    ctx.clearRect(0,0,canvas.width, canvas.height);
    // world
    drawWorld();
    // zone
    drawZone(s.zone);
    // crates
    for(const c of s.crates) drawEntity(c);
    // bullets
    for(const bu of s.bullets) drawEntity(bu);
    // bots
    for(const b of s.bots){ if(b.alive) drawEntity(b); }
    // player last (on top)
    if(s.player.alive) drawEntity(s.player);

    drawMini(s);
  }

  function frame(t){
    if(!state){ requestAnimationFrame(frame); return; }
    if(paused){ requestAnimationFrame(frame); return; }
    let delta = (t-lastTime)/1000; if(delta>0.1) delta=0.1; lastTime=t; acc+=delta;
    while(acc >= dt){ update(state, dt); acc-=dt; }
    render(state);
    requestAnimationFrame(frame);
  }

  // resize canvas to screen pixels
  function resize(){
    const dpr = Math.min(2, window.devicePixelRatio||1);
    canvas.width = Math.floor(canvas.clientWidth*dpr);
    canvas.height = Math.floor(canvas.clientHeight*dpr);
    cam.scale = 1*dpr; // simple scale equals dpr for crispness
  }
  window.addEventListener('resize', resize);
  resize();

  // expose R key hint after a bit
  setTimeout(()=> centerMsg.textContent='R — qayta yuklash · P — pauza', 4000);

  requestAnimationFrame(frame);
})();
</script>
</body>
</html>
